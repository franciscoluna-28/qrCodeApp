import { type NextPage } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { useState } from "react";
import { api } from "~/utils/api";


const Home: NextPage = () => {
  const [qrCodeUrl, setQrCodeUrl] = useState("");
  const [prevQrCodeUrl, setPrevQrCodeUrl] = useState("");
  const hello = api.example.hello.useQuery({ text: "from uwu" });
  const generateQRCode = api.example.generateQRCode.useQuery({
    text: qrCodeUrl,
    enabled: false, // Disable initial query execution
  });

  const handleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {
    const inputText = event.currentTarget.value;
    setQrCodeUrl(inputText);
  };

  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setPrevQrCodeUrl(qrCodeUrl); // Store the current QR code URL
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16">
          <h1 className="font-bold text-white text-5xl">
            Generate QR Code for free!
          </h1>
          <form onSubmit={handleSubmit}>
            <input
              className="border-2 rounded-xl"
              onChange={handleQuery}
              type="text"
            ></input>
            <button className="bg-yellow-500 text-white p-4 rounded-xl" type="submit">Generate</button>
          </form>
          <div>
            {generateQRCode.isLoading && qrCodeUrl === prevQrCodeUrl ? (
              <p>Loading QR Code...</p>
            ) : generateQRCode.error && qrCodeUrl === prevQrCodeUrl ? (
              <p>Error generating QR Code: {generateQRCode.error.message}</p>
            ) : generateQRCode.data && qrCodeUrl === prevQrCodeUrl ? (
              <img src={generateQRCode.data} alt="QR Code" />
            ) : null}
          </div>
        </div>
      </main>
    </>
  );
};


export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
